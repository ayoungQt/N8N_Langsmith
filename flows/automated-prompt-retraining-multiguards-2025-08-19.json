{
  "name": "Anne Young_Langsmith_Filter_By_Guard_Google Docs",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "name": "Schedule Trigger (12am EST)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        -624,
        336
      ],
      "id": "fb11336d-313a-4553-956d-89c884994c22"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "guards",
              "value": "={{ [\n  {\n    \"guardApiName\": \"tool_supevisor\",\n    \"guardFileName\": \"tool_supevisor_node.txt\"\n  },\n  {\n    \"guardApiName\": \"human_assistant_guard_agentic\",\n    \"guardFileName\": \"human_assistant_guard_agentic.txt\"\n  },\n  {\n    \"guardApiName\": \"unusual_prompt_agentic\",\n    \"guardFileName\": \"unusual_prompt_agentic_prompt.txt\"\n  },\n  {\n    \"guardApiName\": \"agentic_knowledge_base\",\n    \"guardFileName\": \"agentic_knowledge_base.txt\"\n  },\n  {\n    \"guardApiName\": \"qa_bot\",\n    \"guardFileName\": \"qa_bot_node.txt\"\n  },\n  {\n    \"guardApiName\": \"financial_advice_guard_agentic\",\n    \"guardFileName\": \"financial_guard_prompt.txt\"\n  },\n  {\n    \"guardApiName\": \"system_instruction_agentic\",\n    \"guardFileName\": \"system_instructions.txt\"\n  },\n  {\n    \"guardApiName\": \"conversational_hallucination_agentic\",\n    \"guardFileName\": \"hallucination_guard_prompt.txt\"\n  }\n] }}"
            },
            {
              "name": "min_created_at",
              "value": "={{ $json.min_created_at }}"
            },
            {
              "name": "max_created_at",
              "value": "={{ $json.max_created_at }}"
            },
            {
              "name": "googleDriveFolderId",
              "value": "=1jplKoFeo3xLShJFO4_MpPUVHfDr-cOwx"
            },
            {
              "name": "googleSheetId",
              "value": "1maCntXucpkj8MPV_w8Hi0NGvNka7r7aOvFTYilaqtis"
            },
            {
              "name": "googleSheetName",
              "value": "Guard_Retraining_Log"
            }
          ]
        },
        "options": {}
      },
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -192,
        336
      ],
      "id": "aa01aac5-ee21-4ac7-9ff9-62c2dcd18538"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Case File\n1. The Original Guard Prompt:\n{{ $('Reformat Original Guard').item.json.decoded_original_guard_prompt }}\n2. The User's Input that Caused the Failure:\n{{ $json.user_input }}\n3. The Bot's Failed Response / Error:\n{{ $json.bot_error }}\n4. Human Feedback on the Failure:\nVerdict: {{ ($json.verdict?.value || $json.verdict || $json.appropriateness?.value || $json.appropriateness || 'N/A') }}\nCategory: {{ ($json.false_positive_category?.value || $json.appropriateness || 'N/A') }}\nReasoning: {{ ($json.reasoning?.value || $json.reasoning || 'N/A') }}\nAnalyst's Note: {{ $json.analyst_note }}",
        "messages": {
          "messageValues": [
            {
              "message": "You are an expert AI Quality Analyst specializing in refining LLM guardrail prompts. Your task is to analyze a documented failure case and provide specific, actionable recommendations to improve the guardrail prompt to prevent this failure from recurring.\n\nINPUTS:\nYou will be provided with a complete failure case file containing three components:\n1. {Original_Guard_Prompt}: The exact text of the guardrail prompt that was active during the failure.\n2. {Problematic_User_Input}: The user input that triggered the failure.\n3. {Failed_AI_Response}: The undesirable response generated by the LLM.\n\nYOUR TASK:\nAnalyze the provided inputs and generate a structured report with the following three sections:\n\n1. Failure Analysis:\n* Summary of Failure: Briefly describe what went wrong. Why was the {Failed_AI_Response} undesirable in the context of the {Problematic_User_Input}?\n* Root Cause Identification: Pinpoint the specific weakness in the {Original_Guard_Prompt} that allowed the failure to occur. Explain whether the issue stems from ambiguous instructions, overly broad or strict language, missing context, or a lack of examples.\n\n2. Actionable Recommendations for Revision:\nProvide a list of specific, targeted recommendations to improve the {Original_Guard_Prompt}. For each recommendation, you must:\n* State the Change: Clearly describe the change (e.g., \"Clarify the definition of 'harmful content',\" \"Add a few-shot example for blocking financial advice requests\").\n* Provide the Rationale: Explain why this change will mitigate the identified root cause.\n* Show the Implementation: Provide the exact text to be added, removed, or modified.\n\n3. Revised Prompt Snippets:\nPresent the specific sections of the guardrail prompt with your recommended changes applied. If you recommend adding few-shot examples, construct them fully, including both an input and the desired \"blocked\" or \"allowed\" output.\n\nInstruction for analysis:\n- Treat each numbered line as a distinct example.\n- In “Failure Analysis” and “Root Cause Identification”, explicitly reference at least 3 distinct examples using citation marks like [#] (e.g., [1], [3], [4]) to show which examples support the point.\n- Aggregate patterns across all examples; do not focus on only one.\n\nYour recommendations should aim for precision and clarity, making the minimum necessary changes to effectively resolve the specific failure mode while preserving the prompt's overall function."
            }
          ]
        },
        "batching": {}
      },
      "name": "LLM 1: Analyze & Generate Example",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        2704,
        240
      ],
      "id": "cba169e8-8d06-4633-9420-1d9faf434758",
      "retryOnFail": true,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Original Guard Prompt:\n---\n{{ $json.decoded_original_guard_prompt }}\n---\n\nRecommendations for Improvement:\n---\n{{ $json.recommendations }}\n---\n\nBased on the above, provide the new, refined guard prompt.\n",
        "messages": {
          "messageValues": [
            {
              "message": "You are an expert AI guardrail prompt refiner. Your task is to take an existing guard prompt and a set of recommendations for improvement, and then generate a new, refined version of the guard prompt.  The new prompt should incorporate all actionable recommendations provided, while maintaining the original intent and core functionality of the guardrail. Focus on clarity, precision, and effectiveness based on the feedback.  Ensure your output is *only* the complete, new guard prompt. Do not include any conversational text, introductions, or explanations outside of the prompt itself."
            }
          ]
        },
        "batching": {}
      },
      "name": "LLM 2: Refine Prompt",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        3328,
        240
      ],
      "id": "cd33c0b0-3441-467c-8fa6-043efb3fd119"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "folderId": "1ubLE1KX4clgc_71LWTfqqBIl4B6UMOXe",
        "title": "={{ \n  (\n    $('Initial Assemble Case File').item.json.guardFileName ||\n    $('Combine Guard and Run Data').item.json.guardFileName ||\n    $('Group and Assemble Data').item.json.guardFileName\n  ).replace('.txt','') + ' — Refined Prompt — ' + new Date($now).toISOString().split('T')[0]\n}}"
      },
      "name": "Create Google Doc",
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 1,
      "position": [
        3728,
        240
      ],
      "id": "c26943d9-5105-429d-95f2-d355391ad661",
      "retryOnFail": true,
      "maxTries": 5,
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "bZYwtvOmFl03Ndmz",
          "name": "Google Docs account 22"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{typeof $json}}",
              "value2": "object"
            }
          ]
        }
      },
      "name": "Is Feedback an Object?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        704,
        240
      ],
      "id": "1b6923bf-a118-4c54-81fa-8131d4a2ca73"
    },
    {
      "parameters": {
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2800,
        464
      ],
      "id": "df11ba3d-554e-4e0f-adbe-a2fbcf3d5d65",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "IAOSnVGtnpDaPeeX",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "url": "    https://api.smith.langchain.com/api/v1/feedback?key=note&key=recommended_action&key=false_positive_reason&key=verdict&key=agreed_with_judge&key=appropriateness&key=reasoning&key=false_positive_category",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "min_created_at",
              "value": "={{ $json.min_created_at }}"
            },
            {
              "name": "max_created_at",
              "value": "={{ $json.max_created_at }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        32,
        336
      ],
      "id": "f0637f31-b3d1-4057-a5db-009395b6a838",
      "name": "Langsmith Feedback",
      "retryOnFail": false,
      "credentials": {
        "httpHeaderAuth": {
          "id": "n8q4SoUNfqLxTSkB",
          "name": "x-api-key"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c204e765-08ef-4fd1-a499-cf32a0ffb7b3",
              "leftValue": "={{ $items.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        480,
        336
      ],
      "id": "d118109b-ac67-413b-84fd-ce2dede4e73f",
      "name": "Check for Records"
    },
    {
      "parameters": {
        "jsCode": "// This object will temporarily store our merged records, using the run_id as the key.\nconst groupedRuns = {};\n\n// The previous node provides a flat list of all feedback items.\n// We can loop through them directly.\nfor (const item of $input.all()) {\n  // Ensure the item has a json property before proceeding.\n  if (!item.json) {\n    continue;\n  }\n  const runId = item.json.run_id;\n\n  // Skip any items that might not have a run_id.\n  if (!runId) {\n    continue;\n  }\n\n  // If we haven't seen this run_id before, create the base record for it.\n  if (!groupedRuns[runId]) {\n    groupedRuns[runId] = {\n      run_id: item.json.run_id,\n      session_id: item.json.session_id,\n      trace_id: item.json.trace_id,\n      created_at: item.json.created_at, // Note: This will be the timestamp of the first feedback item encountered for this run.\n      feedback_source: item.json.feedback_source,\n    };\n  }\n\n  // Get the specific feedback key (e.g., \"note\", \"trip_validity\").\n  const key = item.json.key;\n\n  // Add the feedback as a new property on our grouped record.\n  // We handle the \"note\" key differently, as its main content is in the \"comment\" field.\n  if (key === 'note') {\n    groupedRuns[runId][key] = item.json.comment;\n  } else {\n    // For all other keys, we create an object containing both the value and the score.\n    groupedRuns[runId][key] = {\n      value: item.json.value,\n      score: item.json.score\n    };\n  }\n}\n\n// Convert the temporary object into an array of all merged records.\nconst allMergedRecords = Object.values(groupedRuns);\n\n// --- CORRECTED FILTER ---\n// Keep records that meet EITHER of the following criteria:\n// 1. The 'verdict' is 'False Positive'.\n// OR\n// 2. The 'appropriateness' is 'UNNECESSARY'.\nconst filteredRecords = allMergedRecords.filter(record => {\n  // Check for the first condition (False Positive), ignoring 'agreed_with_judge'.\n  const isFalsePositive = \n    record.hasOwnProperty('verdict') && record.verdict.value === 'False Positive';\n  \n  // Check for the second condition (Unnecessary).\n  const isUnnecessary = \n    record.hasOwnProperty('appropriateness') && record.appropriateness.value === 'UNNECESSARY';\n\n  // Keep the record if EITHER condition is true.\n  return isFalsePositive || isUnnecessary;\n});\n\n// Return the final, filtered list.\nreturn filteredRecords;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        256,
        336
      ],
      "id": "d5369aeb-770d-4e50-b210-374ba5fbfa4d",
      "name": "Group by Run ID"
    },
    {
      "parameters": {
        "content": "## Workflow Configuration\n\nThis node sets the global configuration parameters for the workflow. It contains configs for the following:\n\n🗓️ Date Range\n📄 Document IDs\n🛡️ Guard & Feedback Names",
        "height": 464,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -288,
        32
      ],
      "typeVersion": 1,
      "id": "a26ddae1-22f7-4f39-8c2a-674437ef984c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Get All Feedback (HTTP Request)\nThis node fetches all feedback records from the LangSmith API within the specified date range, using automatic pagination to get all pages.",
        "height": 460,
        "width": 200
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -32,
        48
      ],
      "typeVersion": 1,
      "id": "4830cf99-3e39-4c27-ab30-0921dde9f80a",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Merge and Filter Feedback (Code)\nDouble click to edit me. Guide\n\nThis node groups all feedback records by their run_id and then filters the result to only include records that contain a false_positive_reason.",
        "height": 540,
        "width": 200,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        192,
        -32
      ],
      "typeVersion": 1,
      "id": "49b66790-c80d-43ed-9a66-a1de08729836",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Records found? True/False\n\nIf yes, follow true path if false, follow false path",
        "height": 520,
        "width": 180,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        432,
        -32
      ],
      "typeVersion": 1,
      "id": "90388273-ee8e-4d8a-8289-ff252187713e",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "73957e8f-68d5-4b4f-8a27-952dbcd426fb",
              "name": "user_input",
              "value": "={{ ($('Combine Guard and Run Data').item.json.runDetails || [])\n  .map((r,i) => `${i+1}. ${r?.inputs?.metadata?.user_input || r?.inputs?.metadata?.conversation_transcript?.[0]?.[1] || ''}`)\n  .filter(Boolean)\n  .join('\\n') }}",
              "type": "string"
            },
            {
              "id": "e6ed6bdc-1abf-46c9-8776-5b0b73ab9237",
              "name": "bot_error",
              "value": "={{ ($('Combine Guard and Run Data').item.json.runDetails || [])\n  .map((r,i) => `${i+1}. ${r?.outputs?.error_message || r?.error?.message || ''}`)\n  .filter(Boolean)\n  .join('\\n') }}",
              "type": "string"
            },
            {
              "id": "28ed39b5-a812-4ec5-86ad-0bbf84c97d19",
              "name": "reasoning",
              "value": "={{ $items(\"Group and Assemble Data\")[0].json.feedbackItems.map(item => item.feedbackDetails.reasoning.comment).join(' | ') }}",
              "type": "string"
            },
            {
              "id": "ba243098-8600-49e9-a269-94c3508db6c1",
              "name": "decoded_original_guard_prompt",
              "value": "={{ $items(\"Reformat Original Guard\")[0].json.decoded_original_guard_prompt }}",
              "type": "string"
            },
            {
              "id": "812b9f6c-4a81-4f47-8539-0b946f6e0ea3",
              "name": "recommendations",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "9a8b3bae-122b-4a25-9bab-f5be0e6e48b1",
              "name": "examples_count",
              "value": "={{ ($('Combine Guard and Run Data').item.json.runDetails || []).length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3104,
        240
      ],
      "id": "f94a2a57-8254-46ab-8b20-1fea951fb539",
      "name": "Final Assemble Case File"
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "={{ $json.id }}",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "=Analyze phase findings: {{ $('LLM 1: Analyze & Generate Example').item.json.text }}\n\nRecommended Guard Prompt: \n{{ $node[\"LLM 2: Refine Prompt\"].json.text }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        3952,
        240
      ],
      "id": "6d17095f-0290-4bc1-8617-34d3754462b2",
      "name": "Add Body to Prompt",
      "retryOnFail": true,
      "maxTries": 5,
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "bZYwtvOmFl03Ndmz",
          "name": "Google Docs account 22"
        }
      }
    },
    {
      "parameters": {
        "content": "## Ensure proper formatting & Loop through\n\n",
        "height": 392,
        "width": 212
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        656,
        0
      ],
      "typeVersion": 1,
      "id": "b17dcaf8-a0e7-4574-aeea-467fbefcf46c",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Analyze & Retrain guard failed case against Guard Prompt\n\nUnderstand root cause of failing and provide reasoning for Guard failure. Assemble this to be passed to retraining LLM \nPass case and reasoning to Retraining guard to generate a new guard ",
        "height": 720,
        "width": 976,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2656,
        -48
      ],
      "typeVersion": 1,
      "id": "e068ec7d-38b5-489b-85c4-9ff97913e9ec",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "## Create a new guard file & Update it\n\n- create a new guard file version\n- Update body with analysis, recommendations and new prompt\n- Save to drive folder",
        "height": 592,
        "width": 416
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3680,
        -80
      ],
      "typeVersion": 1,
      "id": "4419be93-ff93-4453-8403-d56a4cd409ae",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1maCntXucpkj8MPV_w8Hi0NGvNka7r7aOvFTYilaqtis",
          "mode": "list",
          "cachedResultName": "Guard_Retraining_Log",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1maCntXucpkj8MPV_w8Hi0NGvNka7r7aOvFTYilaqtis/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1maCntXucpkj8MPV_w8Hi0NGvNka7r7aOvFTYilaqtis/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date of Run": "={{ $now }}",
            "Guard Name Updated": "={{ $('Initial Assemble Case File').item.json.guardApiName || $('Combine Guard and Run Data').item.json.guardApiName || $('Group and Assemble Data').item.json.guardApiName }}",
            "New Prompt Doc URL": "={{ '=HYPERLINK(\"https://docs.google.com/document/d/' + ( $('Add Body to Prompt').item.json.documentId || $('Create Google Doc').item.json.id ) + '\",\"View New Prompt\")' }}",
            "Result": "Success",
            "Langsmith Run ID": "={{ $('Get Run Details').first().json.runs[0].id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Date of Run",
              "displayName": "Date of Run",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Guard Name Updated",
              "displayName": "Guard Name Updated",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "New Prompt Doc URL",
              "displayName": "New Prompt Doc URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Result",
              "displayName": "Result",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Langsmith Run ID",
              "displayName": "Langsmith Run ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        4176,
        240
      ],
      "id": "82a6a008-19b7-4950-b434-a055df2a6b4e",
      "name": "Log Success",
      "retryOnFail": true,
      "maxTries": 5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "VwROdoHFEpdS7CNt",
          "name": "Google Sheets account 53"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1maCntXucpkj8MPV_w8Hi0NGvNka7r7aOvFTYilaqtis",
          "mode": "list",
          "cachedResultName": "Guard_Retraining_Log",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1maCntXucpkj8MPV_w8Hi0NGvNka7r7aOvFTYilaqtis/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1maCntXucpkj8MPV_w8Hi0NGvNka7r7aOvFTYilaqtis/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Result": "Scan Complete - No New Feedback Found",
            "Guard Name Updated": "None",
            "Annotator Comment": "None",
            "New Prompt Doc URL": "None",
            "Langsmith Run ID": "None",
            "Date of Run": "={{ $now }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Date of Run",
              "displayName": "Date of Run",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Guard Name Updated",
              "displayName": "Guard Name Updated",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Annotator Comment",
              "displayName": "Annotator Comment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "New Prompt Doc URL",
              "displayName": "New Prompt Doc URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Result",
              "displayName": "Result",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Langsmith Run ID",
              "displayName": "Langsmith Run ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        704,
        432
      ],
      "id": "c0e0224c-d18a-4312-9a6d-f3d9884fe4d1",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "VwROdoHFEpdS7CNt",
          "name": "Google Sheets account 53"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.smith.langchain.com/api/v1/runs/query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "= {{ JSON.stringify($json.bodyForRequest) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1152,
        240
      ],
      "id": "eb8fb308-d378-4fad-be5f-0d7e9945df9b",
      "name": "Get Run Details",
      "credentials": {
        "httpHeaderAuth": {
          "id": "n8q4SoUNfqLxTSkB",
          "name": "x-api-key"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "    const allFeedback = $input.all();\n    const runIds = allFeedback.map(item => item.json.run_id);\n    const requestBody = { id: runIds };\n    return {\n      json: {\n        bodyForRequest: requestBody,\n        originalFeedback: allFeedback.map(item => item.json) // We'll need this later\n      }\n    };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        928,
        240
      ],
      "id": "0d7190bc-9d75-4ae0-94ba-9ec5af72509b",
      "name": "Prepare Bulk Request"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        2032,
        240
      ],
      "id": "c69ea7e0-7cd2-4ef2-953b-550a85923c35",
      "name": "Download appropriate guard",
      "retryOnFail": true,
      "maxTries": 5,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "Ex3K3m0UPoOVEuw4",
          "name": "Google Drive account 6"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// This node decodes the Base64 encoded 'original_guard_prompt'\n// received from the 'Assemble Case File' node into a readable string.\n\n// It's crucial for the LLM to receive plain text for proper processing.\n\n// Iterate over each item received by this node.\nfor (const item of items) {\n  try {\n    // Get the stringified JSON from the 'original_guard_prompt' field.\n    // Use optional chaining (?.) to prevent errors if the field is missing.\n    const stringifiedJson = item.json.original_guard_prompt;\n\n    // Check if the stringified JSON exists and is a string.\n    if (typeof stringifiedJson === 'string' && stringifiedJson) {\n      // Parse the stringified JSON to get the actual object.\n      const parsedData = JSON.parse(stringifiedJson);\n\n      // Now, get the Base64 encoded string from the 'data' property within the parsed object.\n      const encodedPrompt = parsedData.data;\n\n      // Check if the encoded prompt exists and is a string.\n      if (typeof encodedPrompt === 'string' && encodedPrompt) {\n        // Create a Buffer from the Base64 string and then convert it to a UTF-8 string.\n        // The '77u/' prefix is a Byte Order Mark (BOM) for UTF-8.\n        // We'll remove it if present, as it can sometimes cause display issues.\n        let decodedPrompt = Buffer.from(encodedPrompt, 'base64').toString('utf8');\n\n        // Remove the Byte Order Mark (BOM) if it exists at the beginning of the string.\n        // The BOM for UTF-8 is often represented as \\uFEFF.\n        if (decodedPrompt.charCodeAt(0) === 0xFEFF) {\n          decodedPrompt = decodedPrompt.substring(1);\n        }\n\n        // Add the decoded prompt to the current item's JSON data.\n        // We'll name this new field 'decoded_original_guard_prompt'.\n        item.json.decoded_original_guard_prompt = decodedPrompt;\n      } else {\n        // If the encoded prompt (data property) is missing or not a string, set the decoded field to null\n        // and log a warning.\n        item.json.decoded_original_guard_prompt = null;\n        console.warn(\"Warning: 'data' property within original_guard_prompt was missing or not a string. Setting decoded_original_guard_prompt to null.\");\n      }\n    } else {\n      // If the stringified JSON (original_guard_prompt) is missing or not a string, set the decoded field to null\n      // and log a warning.\n      item.json.decoded_original_guard_prompt = null;\n      console.warn(\"Warning: original_guard_prompt was missing or not a string. Setting decoded_original_guard_prompt to null.\");\n    }\n  } catch (error) {\n    // Catch any errors during parsing or decoding and set the field to null,\n    // also log the error for debugging.\n    item.json.decoded_original_guard_prompt = null;\n    console.error(`Error processing original_guard_prompt: ${error.message}`);\n  }\n}\n\n// Return the modified items.\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        240
      ],
      "id": "d122b031-3a11-4596-9412-474cae767d99",
      "name": "Reformat Original Guard"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "acd1a166-b6e2-4d13-96f4-b313b13cf6f8",
              "name": "original_guard_prompt",
              "value": "={{ $('Download appropriate guard').item.binary.data }}",
              "type": "string"
            },
            {
              "id": "73957e8f-68d5-4b4f-8a27-952dbcd426fb",
              "name": "user_input",
              "value": "={{ $('Combine Guard and Run Data').item.json.runDetails.map(r => (r.inputs?.metadata?.user_input || r.inputs?.metadata?.conversation_transcript?.[0]?.[1])).filter(Boolean).join('\\n---\\n') }}",
              "type": "string"
            },
            {
              "id": "e6ed6bdc-1abf-46c9-8776-5b0b73ab9237",
              "name": "bot_error",
              "value": "={{ ($('Combine Guard and Run Data').item.json.runDetails || []).map(r => r.outputs?.error_message || r.error?.message).filter(Boolean).join('\\n---\\n') }}",
              "type": "string"
            },
            {
              "id": "f0845baa-379d-4045-9a25-790f7a0b0df0",
              "name": "reasoning",
              "value": "={{ $('Group and Assemble Data').item.json.feedbackItems.map(item => item.feedbackDetails.reasoning?.value).filter(Boolean).join(' | ') }}",
              "type": "string"
            },
            {
              "id": "963079a6-044d-41be-89b2-4df3a0af276d",
              "name": "false_positive_category",
              "value": "={{ $('Group and Assemble Data').item.json.feedbackItems.map(item => item.feedbackDetails.false_positive_category?.value).filter(Boolean).join(', ') }}",
              "type": "string"
            },
            {
              "id": "7fb8a9ab-72f9-47f1-a62d-d0556bd0f3f4",
              "name": "analyst_note",
              "value": "={{ $json.note || ($json.feedbackItems || []).map(fi => fi.feedbackDetails?.note || fi.note).filter(Boolean).join(' | ') }}",
              "type": "string"
            },
            {
              "id": "44706921-b209-47af-b6bd-86c8806b8059",
              "name": "=guardFileName",
              "value": "={{ $('Group and Assemble Data').item.json.guardFileName }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2256,
        240
      ],
      "id": "4c0d17d6-32e3-40c1-b2ab-43e98416827c",
      "name": "Initial Assemble Case File"
    },
    {
      "parameters": {
        "jsCode": "// Get the guard configurations from the 'Config' node.\nconst config = $('Config').first().json;\nconst allGuardsConfig = config.guards;\n\n// Get the full, detailed run information from the previous node's API call.\nconst allRunDetails = $input.item.json.runs;\n\n// --- CRITICAL CHANGE ---\n// Instead of looking at the raw feedback, we will look at the already-merged-and-filtered\n// feedback that comes out of your 'Group by Run ID' node.\nconst filteredMergedFeedback = $('Group by Run ID').all().map(item => item.json);\n\n// Create a map of this filtered feedback for easy lookup using the run_id.\nconst feedbackMap = new Map(filteredMergedFeedback.map(fb => [fb.run_id, fb]));\n\n// This object will hold our final, perfectly grouped data.\nconst groupedByGuard = {};\n\n// Loop through each of the detailed runs we received.\nfor (const run of allRunDetails) {\n  // Find the corresponding guard configuration for this run.\n  const guardConfig = allGuardsConfig.find(g => run.name.includes(g.guardApiName));\n  \n  if (guardConfig) {\n    const guardApiName = guardConfig.guardApiName;\n\n    // If this is the first time we've seen this guard, create a new group for it.\n    if (!groupedByGuard[guardApiName]) {\n      groupedByGuard[guardApiName] = {\n        guardApiName: guardApiName,\n        guardFileName: guardConfig.guardFileName,\n        // This will hold all the feedback items for this guard.\n        feedbackItems: [] \n      };\n    }\n    \n    // Find the full, merged feedback object that corresponds to this run.\n    const feedback = feedbackMap.get(run.id);\n\n    // If we found a matching feedback record (which we always should at this point),\n    // add the ENTIRE merged feedback object to this guard's group.\n    if (feedback) {\n      groupedByGuard[guardApiName].feedbackItems.push({\n        runDetails: run,\n        feedbackDetails: feedback // This now contains ALL the feedback keys for that run\n      });\n    }\n  }\n}\n\n// Convert our grouped object into a simple array for the next nodes to process.\nconst result = Object.values(groupedByGuard);\n\n// Return the final array in the format n8n expects.\nreturn result.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1376,
        240
      ],
      "id": "e221f691-a1fa-4c2a-b631-5517a590a145",
      "name": "Group and Assemble Data"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $json.guardFileName || $json.guardData?.guardFileName }}",
        "limit": 1,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "={{ $('Config').first().json.googleDriveFolderId }}",
            "mode": "id"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1808,
        240
      ],
      "id": "3fd5ee63-2e8f-4375-ba4a-f8ec4aa4313d",
      "name": "Search for Guard File",
      "retryOnFail": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "Ex3K3m0UPoOVEuw4",
          "name": "Google Drive account 6"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "    // This function subtracts business days from a given date, operating entirely in UTC.\n    function subtractBusinessDaysUTC(date, days) {\n      let count = 0;\n      while (count < days) {\n        // Move the date back by one day in UTC.\n        date.setUTCDate(date.getUTCDate() - 1);\n        // getUTCDay() returns 0 for Sunday, 6 for Saturday.\n        if (date.getUTCDay() !== 0 && date.getUTCDay() !== 6) {\n          count++;\n        }\n      }\n      return date;\n    }\n\n    // Get the current date object.\n    const now = new Date();\n\n    // Calculate the target date by subtracting two business days in UTC.\n    const targetDate = subtractBusinessDaysUTC(now, 2);\n\n    // --- Create the min_created_at timestamp ---\n    // Set the time to the beginning of the target day in UTC.\n    targetDate.setUTCHours(0, 0, 0, 0);\n    // Get the final ISO string, which will now have T00:00:00.000Z\n    const min_created_at = targetDate.toISOString();\n\n    // --- Create the max_created_at timestamp ---\n    // Set the time to the end of the target day in UTC.\n    targetDate.setUTCHours(23, 59, 59, 999);\n    // Get the final ISO string, which will now have T23:59:59.999Z\n    const max_created_at = targetDate.toISOString();\n\n    // Return the calculated dates for the next node.\n    return {\n      json: {\n        min_created_at: min_created_at,\n        max_created_at: max_created_at\n      }\n    };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -416,
        336
      ],
      "id": "7a5a43ae-51ed-47a5-8eef-c3fd28ea355f",
      "name": "Calcuate Date"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ef7a49f9-716c-4c9e-84fe-1743c79775eb",
              "name": "guardData",
              "value": "={{ $json }}",
              "type": "object"
            },
            {
              "id": "5d1d2fab-842a-4684-98dc-804e05660792",
              "name": "runDetails",
              "value": "={{ $json.feedbackItems.map(fi => fi.runDetails) }}",
              "type": "array"
            },
            {
              "id": "f3d2f72e-2203-4705-b40d-24c9c7905e44",
              "name": "currentGuard",
              "value": "={{ $json.guardApiName || $json.guardData?.guardApiName }}",
              "type": "string"
            },
            {
              "id": "40249f89-6e83-4fc9-939b-9130de0a7103",
              "name": "itemIndex",
              "value": "={{ $itemIndex }}",
              "type": "number"
            },
            {
              "id": "f8cdcddd-2f9f-47d3-8676-0f0999f855dc",
              "name": "uniqueGuardNames",
              "value": "={{ [...new Set(($json.feedbackItems || []).map(fi => fi.runDetails?.name).filter(Boolean))] }}",
              "type": "array"
            },
            {
              "id": "b622bdc5-a9a8-474f-b124-eda2ed1849b5",
              "name": "guardsCount",
              "value": "={{ [...new Set(($json.feedbackItems || []).map(fi => fi.runDetails?.name).filter(Boolean))].length }}",
              "type": "number"
            },
            {
              "id": "9619c524-5f64-4c6b-b70e-4645bf88d243",
              "name": "firstRunNames",
              "value": "={{ ($json.feedbackItems || []).map(fi => fi.runDetails?.name) }}",
              "type": "array"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1584,
        240
      ],
      "id": "808cad6c-98a7-49cc-a6bc-da6492814721",
      "name": "Combine Guard and Run Data"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3360,
        448
      ],
      "id": "d42ddf27-6c4d-4678-ac38-a6acfc6a2fd6",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "IAOSnVGtnpDaPeeX",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger (12am EST)": {
      "main": [
        [
          {
            "node": "Calcuate Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Langsmith Feedback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM 1: Analyze & Generate Example": {
      "main": [
        [
          {
            "node": "Final Assemble Case File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM 2: Refine Prompt": {
      "main": [
        [
          {
            "node": "Create Google Doc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Google Doc": {
      "main": [
        [
          {
            "node": "Add Body to Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Feedback an Object?": {
      "main": [
        [
          {
            "node": "Prepare Bulk Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "LLM 1: Analyze & Generate Example",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Langsmith Feedback": {
      "main": [
        [
          {
            "node": "Group by Run ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Records": {
      "main": [
        [
          {
            "node": "Is Feedback an Object?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Group by Run ID": {
      "main": [
        [
          {
            "node": "Check for Records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Assemble Case File": {
      "main": [
        [
          {
            "node": "LLM 2: Refine Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Body to Prompt": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Bulk Request": {
      "main": [
        [
          {
            "node": "Get Run Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download appropriate guard": {
      "main": [
        [
          {
            "node": "Initial Assemble Case File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initial Assemble Case File": {
      "main": [
        [
          {
            "node": "Reformat Original Guard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Run Details": {
      "main": [
        [
          {
            "node": "Group and Assemble Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Group and Assemble Data": {
      "main": [
        [
          {
            "node": "Combine Guard and Run Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reformat Original Guard": {
      "main": [
        [
          {
            "node": "LLM 1: Analyze & Generate Example",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search for Guard File": {
      "main": [
        [
          {
            "node": "Download appropriate guard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calcuate Date": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Guard and Run Data": {
      "main": [
        [
          {
            "node": "Search for Guard File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "LLM 2: Refine Prompt",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "99e249aa-99cc-4138-8ede-28253d1f4189",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "371eeabae1bc66baa92b2fb66b3ad10012ef11e20b9f55516de501be4b6b1e56"
  },
  "id": "fnvwZt4Q0QpVekC4",
  "tags": []
}